from fastapi import FastAPI, UploadFile, File, HTTPException, Depends, Header
from fastapi.responses import FileResponse, HTMLResponse
from pathlib import Path
from contextlib import asynccontextmanager

from blake3 import blake3
import aiofiles
import os
import httpx
import asyncio

from pydantic import BaseModel
from app.worker.instance import worker

from app.db.client import init_db, get_session
from app.services.create_task import create_task, get_task_by_id
from dotenv import load_dotenv
from app.db.models import Task, TaskType
from app.postprocessing.convert2html import convert_text2html
from fastapi import FastAPI, UploadFile, File, Form, HTTPException
from typing import Optional
import aiohttp
import os
from app.utils.agent import init_api_key_zset# --- C·∫•u h√¨nh th∆∞ m·ª•c ---
PRIVATE_DIR = Path("media").resolve()
PRIVATE_DIR.mkdir(exist_ok=True)
keys = os.environ.get("GEMINI_API_KEY", "").split(",")

# --- Init DB khi start server ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    init_db()
    await init_api_key_zset(keys)
    yield

app = FastAPI(lifespan=lifespan)
# --- Middleware x√°c th·ª±c (gi·∫£ l·∫≠p) ---
def verify_access(x_token: str = Header(None)):
    if x_token != os.environ.get("X_FILE_TOKEN"):
        raise HTTPException(status_code=401, detail="Unauthorized")


# --- Serve file PRIVATE (PDF, ·∫£nh g·ªëc) ---
@app.get("/media/{file_path:path}")
def serve_private_file(file_path: str, _: str = Depends(verify_access)):
    full_path = (PRIVATE_DIR / file_path).resolve()

    if not str(full_path).startswith(str(PRIVATE_DIR)):
        raise HTTPException(status_code=403, detail="Access denied")

    if not full_path.exists() or not full_path.is_file():
        raise HTTPException(status_code=404, detail="File not found")

    return FileResponse(full_path, filename=full_path.name)



async def save_file(file_bytes: bytes, file_type: str) -> Path:
    # T√≠nh hash
    file_hash = blake3(file_bytes).hexdigest()

    # T·∫°o th∆∞ m·ª•c con
    subdir = PRIVATE_DIR / file_hash[:2] / file_hash[2:4]
    subdir.mkdir(parents=True, exist_ok=True)

    filename = f"{file_hash}.{file_type}"
    filepath = subdir / filename

    # Ch·ªâ ghi file n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i
    if not filepath.exists():
        temp_path = subdir / f".{filename}.tmp"
        # Ghi v√†o file t·∫°m
        async with aiofiles.open(temp_path, "wb") as f:
            await f.write(file_bytes)
        # Rename file t·∫°m th√†nh file th·∫≠t (atomic)
        try:
            temp_path.rename(filepath)
        except Exception as e:
            # C√≥ th·ªÉ file ƒë√£ ƒë∆∞·ª£c t·∫°o b·ªüi m·ªôt process kh√°c trong l√∫c ghi, kh√¥ng sao c·∫£
            print(f"Could not rename temp file, possibly due to race condition: {e}")
            if temp_path.exists():
                temp_path.unlink() # X√≥a file t·∫°m ƒëi

    # Lu√¥n t√≠nh to√°n v√† tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi
    relative_path = filepath.relative_to(PRIVATE_DIR)
    return relative_path




@app.get("/logs")
def read_latest_worker_log():
    # üìÅ Tr·ªè t·ªõi th∆∞ m·ª•c ch·ª©a log
    log_dir = (Path(__file__).resolve().parent.parent / "logs").resolve()

    if not log_dir.exists() or not log_dir.is_dir():
        raise HTTPException(status_code=404, detail="Log directory not found")

    # üîç T√¨m t·∫•t c·∫£ c√°c file b·∫Øt ƒë·∫ßu b·∫±ng "workers_log"
    log_files = list(log_dir.glob("workers_log*.txt*"))

    if not log_files:
        raise HTTPException(status_code=404, detail="No log files found")

    # üïì Ch·ªçn file m·ªõi nh·∫•t d·ª±a v√†o th·ªùi gian s·ª≠a ƒë·ªïi
    latest_log = max(log_files, key=lambda f: f.stat().st_mtime)

    return FileResponse(
        path=latest_log,
        media_type="text/plain",
        filename=latest_log.name,
        headers={"Content-Disposition": f"inline; filename={latest_log.name}"}
    )
async def get_file_bytes(url):
    headers = {"x-token": os.environ.get("X_FILE_TOKEN")}
    async with httpx.AsyncClient() as client:
        resp = await client.get(url, headers=headers)
        return resp.content
# --- API Upload PDF ---


@app.post("/process-pdf")
async def handle_pdf(
    file: Optional[UploadFile] = File(None),
    url: Optional[str] = Form(None)  # D√πng Form ƒë·ªÉ nh·∫≠n URL t·ª´ body
):
    file_bytes = None
    filename = None

    if file:
        if not file.filename.lower().endswith(".pdf"):
            raise HTTPException(status_code=400, detail="Ch·ªâ ch·∫•p nh·∫≠n file PDF.")
        file_bytes = await file.read()
        filename = file.filename
        await file.close()
    elif url:
        if not url.lower().endswith(".pdf"):
            raise HTTPException(status_code=400, detail="URL ph·∫£i tr·ªè ƒë·∫øn m·ªôt file PDF.")
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    if resp.status != 200:
                        raise HTTPException(status_code=400, detail="Kh√¥ng th·ªÉ t·∫£i file t·ª´ URL.")
                    file_bytes = await resp.read()
                    filename = os.path.basename(url)
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"L·ªói khi t·∫£i file: {str(e)}")
    else:
        raise HTTPException(status_code=400, detail="C·∫ßn cung c·∫•p file ho·∫∑c URL.")

    # L∆∞u file
    relative_file_path_str = await save_file(file_bytes=file_bytes, file_type='pdf')
    file_url = f"http://localhost:8000/media/{relative_file_path_str}"

    # T·∫°o task
    task_id = None
    with get_session() as session:
        task = create_task(task_type=TaskType("parseDocumentPDF"), session=session)
        task_id = task.id

    await worker.enqueue("process_pdf", task_id, file_url)

    return {"task_id": task_id}


class Text2Slurp(BaseModel):
    text: str

@app.post("/document-parsing")
async def documentParsing(body: Text2Slurp):
    task_id=None
    with get_session() as session:
        task = create_task(task_type=TaskType("documentParsing"), session=session)
        task_id = task.id
    await worker.enqueue("documentParsing", task_id, body.text)
    return {"task_id": task_id}


# Route: GET one task theo id
@app.get("/tasks/{task_id}")
def get_task(task_id: str):
    with get_session() as session:
        task = get_task_by_id(task_id=task_id, session=session)
        if task:
                return {
                    "id": str(task.id),
                    "type": task.type.value,
                    "status": task.status.value,
                    "result": task.result,
                    "createdAt": task.createdAt.isoformat(),
                    "updatedAt": task.updatedAt.isoformat(),
                }
        raise HTTPException(status_code=404, detail="Task not found")

class Text2Html(BaseModel):
    text: str

@app.post("/text2html/")
async def text2html(body: Text2Html):
    
    return HTMLResponse(content=convert_text2html(body.text) , media_type="text/html")

# # --- Serve file PUBLIC (figure) ---
# @app.get("/media-public/{file_path:path}")
# def serve_public_file(file_path: str):
#     full_path = (PUBLIC_DIR / file_path).resolve()

#     if not str(full_path).startswith(str(PUBLIC_DIR)):
#         raise HTTPException(status_code=403, detail="Access denied")

#     if not full_path.exists() or not full_path.is_file():
#         raise HTTPException(status_code=404, detail="File not found")

#     return FileResponse(full_path, filename=full_path.name)
